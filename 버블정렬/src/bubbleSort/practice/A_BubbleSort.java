package bubbleSort.practice;

import java.util.Scanner;

public class A_BubbleSort {
	/*
	 * 버블정렬
	 * 
	 * 01 정의
	 * 	두 개의 인접한 원소를 비교하여 정렬하는 방식
	 * 	정렬 과정에서 보이는 원소의 이동이 마치 거품이 수면 위로 올라오는 모습 같다고 해서 거품(Bubble)이라는 이름이 붙음
	 * 
	 * 02 특징
	 *	1) 버블정렬은 '비교정렬', '제자리정렬', '안정정렬'이라고 부르기도 한다.
	 *		- 데이터를 '비교'하면서 찾기 때문에 '비교정렬'이라고 부른다.
	 *		- 정렬의 대상이 되는 데이터 외에 추가적인 공간을 필요로 하지 않기 때문에 '제자리정렬'이라고 부른다.
	 *				* 정확히는 데이터를 서로 교환하는 과정에서 임시 변수를 필요로 하나,	
	 *				  이는 무시해도 괜찮을 만큼 적은 양이기 때문에 제자리정렬로 본다.
	 *		- 앞에서부터 차례대로 비교하기 때문에 '안정정렬'이라고 부른다.
	 *
	 * 03 장단점
	 * 	1) 장점
	 * 		- 구현이 매우 간단하다.
	 * 		- 이해하기가 쉽다.
	 * 
	 *  2) 단점
	 *  	- 시간이 오래 걸린다.
	 *  	- 비효율적이다.
	 * 	 		하나의 요소가 가장 왼쪽에서 가장 오른쪽으로 이동하기 위해 배열에서 '모든' 요소들과 교환되어야 한다.
	 *  	  	특정 요소가 최종 정렬 위치에 이미 있는 경우라도 교환이 이루어진다.
	 *  		요소 개수 n-1번을 1회전으로 모든 요소들이 교환될 때까지 계속 반복된다.
	 *  
	 *  	=> 구현은 매우 간단하지만 비효율적인 정렬방법이다.
	 *  
	 * 04 정렬방법
	 *		두 숫자를 비교, 큰 숫자를 오른쪽으로 스왑(swap)하며 정렬
	 *		1) 앞에서부터 현재 원소와 바로 다음의 원소를 비교한다.
	 *		2) 현재 원소가 다음 원소보다 크면 원소를 교환한다.
	 *		3) 다음 원소로 이동하여 해당 원소와 그 다음 원소를 비교한다.
	 *
	 *		=> 1회전이 수행될 때마다 제일 큰 값이 맨 뒤로 이동함.
	 *		   2회전에는 1회전 때 이동한 맨 끝 원소는 제외하고 2회전 수행.
	 *		   이 과정을 끝까지 반복
	 *		
	 *		ex) int arr[] = {7, 4, 5, 1, 3}
	 *					 -> 1회전	{7, 4, 5, 1, 3}을 가지고 정렬 수행
	 *			    		   (1) 7(arr[0]), 4(arr[1]) 비교 '7 > 4' => 교환O => {4, 7, 5, 1, 3}
	 *		    	    	   (2) 7(arr[1]), 5(arr[2]) 비교 '7 > 5' => 교환O => {4, 5, 7, 1, 3}
 	 *		    	    	   (3) 7(arr[2]), 1(arr[3]) 비교 '7 > 1' => 교환O => {4, 5, 1, 7, 3}
 	 *			    		   (4) 7(arr[3]), 3(arr[4]) 비교 '7 > 3' => 교환O => {4, 5, 1, 3, 7}
	 *								=> 1회전 완료. 제일 큰 값인 7이 맨 뒤(arr[4])로 이동. 2회전은 7 제외한 {4, 5, 1, 3}으로 진행
	 *
	 *			    		2회전 맨 마지막 값 7은 arr[4] 자리에 두고 {4, 5, 1, 3}을 가지고 정렬 수행
	 *			    		   (1) 4(arr[0]), 5(arr[1]) 비교 '4 < 5' => 교환X => {4, 5, 1, 3, 7}
	 *			    		   (2) 5(arr[1]), 1(arr[2]) 비교 '5 > 1' => 교환O => {4, 1, 5, 3, 7}
	 *			    		   (3) 5(arr[2]), 3(arr[3]) 비교 '5 > 3' => 교환O => {4, 1, 3, 5, 7}
	 *			    				=> 2회전 완료. 7다음으로 제일 큰 값인 5가 arr[3] 자리로 이동. 3회전은 7, 5 제외한 {4, 1, 3}으로 진행
	 *
	 *			    		3회전 7,5 제외한 {4, 1, 3}으로 정렬 수행
	 *			    		   (1) 4(arr[0]), 1(arr[1]) 비교 '4 > 1' => 교환O => {1, 4, 3, 5, 7}
	 *			    		   (2) 4(arr[1]), 3(arr[2]) 비교 '4 > 3' => 교환O => {1, 3, 4, 5, 7}
	 *								=> 3회전 완료. 7, 5 다음으로 제일 큰 값이 4가 arr[2] 자리로 이동. 4회전은 7, 5, 4 제외한 {1, 3}으로 진행
	 *
	 *			    		4회전 7, 5, 4 제외한 {1, 3}으로 정렬 수행
	 *			    		   (1) 1(arr[0]), 3(arr[1]) 비교 '1 < 3' => 교환X => {1, 3, 4, 5, 7}
	 *
	 *						=> 오름차순 버블 정렬 완성 상태 {1, 3, 4, 5, 7}						
	 * 
	 * 
	 */
	
	
	
	public void bubble() {
		
		//배열 값 받아오기
		
//		Scanner sc = new Scanner(System.in);
//
//		int[] arr = new int[6];
//	
//		System.out.println("배열 값을 입력해 주세요. > ");
//	
//		for (int i = 0; i < arr.length; i++) {
//		arr[i] = sc.nextInt();
//		}
		
		//버블정렬
		
		
		
		int[] arr = new int[] {5, 3, 2, 6, 4, 1};
		
		int temp;
		for (int i = 0; i < arr.length; i++) {
			for (int j = 1; j < arr.length- i; j++) {
				if(arr[j-1] > arr[j]) {
					temp = arr[j-1];		// j-1에 있는 걸 임시로 temp변수에 넣어줌
					arr[j-1] = arr[j];		// == 같다  = 오른쪽 값을 왼쪽에 넣어주는 거 그림을 그려보기
					arr[j] = temp;
				}
			}
		}
		
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
		
		
	}
}
